function [timings,countTimings, planesTogether]  = calculateNbOfRunways(inputMatrix)
    %% Creating matrix
    [sizeInput,~] = size(inputMatrix);

    stnmatrix = 10000*(ones(1 + 3*sizeInput, 1 + 3*sizeInput) - diag(ones(1 + 3*sizeInput,1)));
    
    for i=1:sizeInput
       stnmatrix(3*(i-1)+2, 1) = - inputMatrix(i,2);
       stnmatrix(3*(i-1)+3, 3*(i-1)+2) = -20; 
       stnmatrix(3*(i-1)+4, 3*(i-1)+3) = -5; 
       stnmatrix(3*(i-1)+3, 3*(i-1)+4) = 5; 
       stnmatrix(1, 3*(i-1)+3) = inputMatrix(i,3); 
    end
    
    runways = stnmatrix;
    %% Initial solving (infinite runways)
    outputstn = FastFloyd(stnmatrix);
    % Earliest timings
    timings = -outputstn(:,1);
    
    leavingTimePlane = zeros(sizeInput, 2);
    for i = 1:sizeInput
        leavingTimePlane(i,:) = [i, timings(3*i, 1)];
    end
    
    leavingTimePlane = sortrows(leavingTimePlane, 2);
    [countTimings, planesTogether] = calculateNbOfConcurrentPlanes(leavingTimePlane, sizeInput, timings);
    
    %% 
    
        peak = getEarliestPeaks(countTimings, planesTogether);
        % add constraint
        outputstn = addConstraintForPeak(outputstn, leavingTimePlane, peak);


end

function [countTimings, planesTogether] = calculateNbOfConcurrentPlanes(leavingTimePlane, sizeInput, timings)
    countTimings = zeros(sizeInput, 1);
    planesTogether = cell(sizeInput, 1);
    
    for i=1:sizeInput
        index = leavingTimePlane(i,1);
        
        timingPlane1 = [timings(3*(index-1)+3, 1), timings(3*(index-1)+4, 1)];
        
        planesTogether{index, 1} = cell(0,0);
        
        for j = i:sizeInput
            interIndex = leavingTimePlane(j,1);
            timingPlane2 = [timings(3*(interIndex-1)+3, 1), timings(3*(interIndex-1)+4, 1)];
            isInInterval = checkIfInInterval(timingPlane1, timingPlane2); 
            
            countTimings(index, 1) = countTimings(index, 1) + isInInterval;
            
            if isInInterval == 1
                planesTogether{index, 1} = [planesTogether{index,1}, {[interIndex, timings(3*(interIndex-1)+3, 1), timings(3*(interIndex-1)+4, 1)]}];
            end
        end
    end
end

function earliestPeak = getEarliestPeaks(countTimings, planesTogether)
    [maxPeaks, index] = max(countTimings);
    earliestPeak = planesTogether{index, 1};
end

function outputstn = addConstraintForPeak(inputstn, peak)
    
    [peakSize, ~] = size(peak);
    latestTiming = zeros(peakSize, 1);
    %% Select most freedom
    for i = 1:peakSize
        index = peak{i,1};
        latestTiming = (1, 3*(index-1)+3)
        mostFreedom = max(mostFreedom, timings(index, 3) - timings(index,2)); 
    end
    
    if mostFreedom > 0
        for i = 1:peakSize
            index = peak{i,1};
            if timings(index, 3) - timings(index,2) == mostFreedom
                outputstn = newSTN(inputstn, plane1, plane2, 5);
            end
        end
        
    end
    outputstn = inputstn;
end